#!/bin/bash

# 0.6.0 backlogs
#   - derived: kube-apps-ctrl, docker-apps, node-adm, zerus-test

#==============================================================================
# Copyright (c) 2019, tarlety@gmail.com
#
# Zerus Scripting Standard v0.5.1
#
# This standard defines script state management framework.
# Following this framework, you can manage app states in a consistent way.
#
# Environments:
#
#    ZSS_STORE	The store location to keep config/secret/stte/data.
#
# Commands:
#
#    env                Display all runtime environments, configurables, and required tools.
#    config ...         Set configurations by this command.
#    secret-create      Create new secrets.
#    state [config/secret/data] [list/save/load] [state-name]
#                       App state type includes config, secret, and data.
#                       The state can be saved or loaded.
#                       Default state type is all states and default action is "list".
#
# Store Structure:
#
#   - store/projectname/appname/config
#   - store/projectname/appname/secret
#     - *.env
#   - store/projectname/appname/data
#     - (container volume)
#   - store/projectname/appname/state
#     - *-config.tgz
#     - *-secret.tgz.enc
#     - *-data.tgz.enc
#   - store/projectname/appname/others...
#
# Scnario:
#
#    1. First, use "<app> env" to check current configurations.
#    2. Then, use "<app> config" to set proper configurations based on runtime environments.
#    3. Then, use "<app> secret-create" to create secret based on authentications.
#    4. Then, use "<app> state" to save config and secret.
#
# Changelog:
#
#    v0.5.0:
#       - new designed Store Structure
#       - framework integrated: app-related sections are bounded by AppImplementing
#       - certificate as secret files shall be encrypted

#==============================================================================
# Environments:

VERSION=0.5.1
PROJECTNAME=zerus
APPNAME=kube-apps-platform
STORE=${ZSS_STORE:-"${PWD}/.store"}/${PROJECTNAME}/${APPNAME}
SECRET=${SECRET:-"${STORE}/secret"}
CONFIG=${CONFIG:-"${STORE}/config"}
DATA=${DATA:-"${STORE}/data"}
STATE=${STATE:-"${STORE}/state"}

BASE_CONFIG=`cat ${CONFIG}/base_config 2>/dev/null`
BASE_SECRET=`cat ${CONFIG}/base_secret 2>/dev/null`
BASE_DATA=`cat ${CONFIG}/base_data 2>/dev/null`
SALT=${SECRET}/salt

DEFAULT_GPGKEY=${USERNAME}

# AppImplementing Section: configs
#------------------------------------------------------------------------------
CONFIGKEYS="domain subject hostctrl storagectrl"
declare -A CONFIG_DESCRIPTIONS
CONFIG_DESCRIPTIONS=( \
	["domain"]="the base domain name of the service." \
	["subject"]="the certificate subject string." \
	["hostctrl"]="the ctrl command to control host." \
	["storagectrl"]="the storagectrl command to create pv." \
	)

DEFAULT_DOMAIN=minikube
DEFAULT_SUBJECT=/C=CN/ST=State/L=Location/O=Org/OU=Unit/CN=minikube
DEFAULT_HOSTCTRL='ssh -o "StrictHostKeyChecking no" -i `minikube ssh-key` docker@`minikube ip`'
DEFAULT_STORAGECTRL=${PWD}/store/hostpath.sh

DOMAIN=`cat ${CONFIG}/domain 2>/dev/null`
SUBJECT=`cat ${CONFIG}/subject 2>/dev/null`
HOSTCTRL=`cat ${CONFIG}/hostctrl 2>/dev/null`
STORAGECTRL=`cat ${CONFIG}/storagectrl 2>/dev/null`

EXTFILE=${SECRET}/v3.ext
KEY=${SECRET}/cert.key
CRT=${SECRET}/cert.crt
REQ=${SECRET}/cert.req
#------------------------------------------------------------------------------

GPGKEY=`cat ${CONFIG}/gpgkey 2>/dev/null`

eval export $(echo ${CONFIGKEYS} | tr '[:lower:]' '[:upper:]')

#==============================================================================
# Commands

case $1 in
	"version")
		echo ${VERSION}
		;;
	"env")
		echo =========================================================================
		echo "## NAME: ${PROJECTNAME}/${APPNAME}"
		echo - VERSION: ${VERSION}
		echo - STORE: ${STORE}
		echo - SECRET: $(echo $(cat $SALT 2>/dev/null) $(cat ${SECRET}/* | sha256sum 2>/dev/null) | sha1sum | cut -c1-8)
		for KEY in ${CONFIGKEYS}
		do
			KEY=$(echo ${KEY} | tr '[:lower:]' '[:upper:]')
			eval echo - ${KEY}: \${${KEY}}
		done
		echo - GPGKEY: ${GPGKEY} $(gpg -k ${GPGKEY} 2>/dev/null | sed -n '2p' | xargs)
		echo "## REQUIREMENT:"
		# AppImplementing Section: requirement
		#------------------------------------------------------------------------------
		echo - minikube: $(which minikube)
		echo - kubectl: $(which kubectl)
		echo - openssl: $(which openssl)
		#------------------------------------------------------------------------------
		echo - gpg: $(which gpg)
		echo - tar: $(which tar)
		echo - colordiff: $(which colordiff)
		echo =========================================================================
		;;
	"config")
		shift
		mkdir -p ${CONFIG}
		case $1 in
			# AppImplementing Section: config cases
			#------------------------------------------------------------------------------
			"domain"|"subject"|"hostctrl"|"storagectrl")
			#------------------------------------------------------------------------------
				KEY=$1
				VALUE_VAR=$(echo DEFAULT_${KEY} | tr '[:lower:]' '[:upper:]')
				VALUE=${2:-$(eval echo \${${VALUE_VAR}})}
				eval echo \'${VALUE}\' > ${CONFIG}/${KEY}
				;;
			"gpgkey")
				shift
				GPGKEY=${1:-${DEFAULT_GPGKEY}}
				echo ${GPGKEY} >  ${CONFIG}/gpgkey
				;;
			*)
				echo "Usage: $(basename $0) config <key> <value>"
				echo ""
				echo "Config keys:"
				echo ""
				for KEY in ${CONFIGKEYS}
				do
					VALUE_VAR=$(echo DEFAULT_${KEY} | tr '[:lower:]' '[:upper:]')
					VALUE=${2:-$(eval echo \${${VALUE_VAR}})}
					DESCRIPTION=${CONFIG_DESCRIPTIONS[${KEY}]}
					echo " ${KEY}: ${DESCRIPTION}"
					echo "	Ex: $(basename $0) config ${KEY} ${VALUE}"
				done
				echo " gpgkey: configure which gpg key to use."
				echo "	Ex: $(basename $0) config gpgkey ${DEFAULT_GPGKEY}"
				;;
		esac
		;;
	"secret-create")
		shift
		mkdir -p ${SECRET}
		chmod -R go-rwx ${SECRET}

		# AppImplementing Section: secret-create
		#------------------------------------------------------------------------------
		rm -f ${KEY}.enc ${REQ}.enc ${CRT}.enc

		$(dirname $0)/templates/v3.ext.template "${DOMAIN}" > ${EXTFILE}
		openssl genrsa -out ${KEY}
		openssl req -sha512 -new -key ${KEY} -out ${REQ} -subj ${SUBJECT}
		openssl x509 -sha512 -req -days 365 -in ${REQ} -signkey ${KEY} -out ${CRT} -extfile ${EXTFILE}
		gpg -ear ${GPGKEY} -o ${KEY}.enc ${KEY}
		gpg -ear ${GPGKEY} -o ${REQ}.enc ${REQ}
		gpg -ear ${GPGKEY} -o ${CRT}.enc ${CRT}

		rm ${KEY} ${REQ} ${CRT} ${EXTFILE}
		#------------------------------------------------------------------------------

		gpg --gen-random --armor 2 16 | base64 | cut -c1-16 > ${SALT}
		;;
	"state")
		shift
		ACTION=$1
		TYPE=$2
		STATENAME=$3

		mkdir -p ${STORE}/state ${STORE}/data
		case ${ACTION} in
			"save")
				if [ "${TYPE}" == "config" -o "${TYPE}" == "" ]; then
					echo ${STATENAME} > ${CONFIG}/base_config
					$0 env > ${CONFIG}/env
					cd ${CONFIG}
					tar -zcf ${STORE}/state/${STATENAME}-${APPNAME}-config.tgz .
					cd - &> /dev/null
				fi
				if [ "${TYPE}" == "secret" -o "${TYPE}" == "" ]; then
					echo ${STATENAME} > ${CONFIG}/base_secret
					mv -f ${STORE}/state/${STATENAME}-${APPNAME}-secret.tgz.enc ${STORE}/state/${STATENAME}-bak-${APPNAME}-secret.tgz.enc &>/dev/null
					cd ${SECRET}
					tar -zc . | \
						gpg -ear ${GPGKEY} -o ${STORE}/state/${STATENAME}-${APPNAME}-secret.tgz.enc
					cd - &> /dev/null
				fi
				if [ "${TYPE}" == "data" -o "${TYPE}" == "" ]; then
					# AppImplementing Section: data save
					#------------------------------------------------------------------------------
					echo "DATA state not support."
					#------------------------------------------------------------------------------
				fi
				;;
			"load")
				if [ "${TYPE}" == "config" -o "${TYPE}" == "" ]; then
					if [ -e ${STORE}/state/${STATENAME}-${APPNAME}-config.tgz ]
					then
						cd ${CONFIG}
						tar -zxf ${STORE}/state/${STATENAME}-${APPNAME}-config.tgz
						cd - &> /dev/null
					fi
					echo ${STATENAME} > ${CONFIG}/base_config
				fi
				if [ "${TYPE}" == "secret" -o "${TYPE}" == "" ]; then
					if [ -e ${STORE}/state/${STATENAME}-${APPNAME}-secret.tgz.enc ]
					then
						cd ${SECRET}
						# AppImplementing Section: secret load
						#------------------------------------------------------------------------------
						gpg -d ${STORE}/state/${STATENAME}-${APPNAME}-secret.tgz.enc | tar xz
						#------------------------------------------------------------------------------
						cd - &> /dev/null
					fi
					echo ${STATENAME} > ${CONFIG}/base_secret
				fi
				if [ "${TYPE}" == "data" -o "${TYPE}" == "" ]; then
					# AppImplementing Section: data load
					#------------------------------------------------------------------------------
					echo "DATA state not support."
					#------------------------------------------------------------------------------
				fi
				;;
			"list"|*)
				HC='\033[0;93m'
				NC='\033[0m'
				if [ "${TYPE}" == "config" -o "${TYPE}" == "" ]; then
					echo -e "${HC}## CONFIG: ${BASE_CONFIG}${NC}"
					cd ${STATE}
					ls *-${APPNAME}-config.tgz 2>/dev/null | sed "s/\(.*\)-${APPNAME}-config.tgz/           \1/"
					cd - &>/dev/null
				fi
				if [ "${TYPE}" == "secret" -o "${TYPE}" == "" ]; then
					echo -e "${HC}## SECRET: ${BASE_SECRET}${NC}"
					cd ${STATE}
					ls *-${APPNAME}-secret.tgz.enc 2>/dev/null | sed "s/\(.*\)-${APPNAME}-secret.tgz.enc/           \1/"
					cd - &>/dev/null
				fi
				if [ "${TYPE}" == "data" -o "${TYPE}" == "" ]; then
					echo -e "${HC}## DATA  : ${BASE_DATA}${NC}"
					cd ${STATE}
					ls *-${APPNAME}-data.tgz.enc 2>/dev/null | sed "s/\(.*\)-${APPNAME}-data.tgz.enc/           \1/"
					cd - &>/dev/null
				fi

				echo -e "${HC}## ENV   : STATE                                              | CURRENT${NC}"
				$0 env | colordiff -y --suppress-common-lines ${CONFIG}/env -
				;;
		esac
		;;
	# AppImplementing Section: commands
	#------------------------------------------------------------------------------
	"certs")
		shift
		case $1 in
			"on")
				gpg -d ${KEY}.enc | \
					kubectl create secret generic traefik-cert-key --from-file=cert.key=/dev/stdin -n kube-system
				gpg -d ${CRT}.enc | \
					kubectl create secret generic traefik-cert-crt --from-file=cert.crt=/dev/stdin -n kube-system
				;;
			"off")
				kubectl delete secret traefik-cert-key -n kube-system
				kubectl delete secret traefik-cert-crt -n kube-system
				;;
		esac
		;;
	"ing")
		shift
		case $1 in
			"on")
				kubectl create configmap traefik-conf -n kube-system --from-file=traefik.toml=traefik/traefik.toml
				kubectl apply -f traefik/traefik-rbac.yaml
				kubectl apply -f traefik/traefik-ds.yaml
				;;
			"off")
				kubectl delete -f traefik/traefik-ds.yaml
				kubectl delete -f traefik/traefik-rbac.yaml
				kubectl delete configmap traefik-conf -n kube-system
				;;
		esac
		;;
	"ssh")
		shift
		eval ${HOSTCTRL} -- \"$*\"
		;;
	"store")
		shift
		ACTION=$1
		shift
		case ${ACTION} in
			"create")
				eval ${STORAGECTRL} $1 $2 $3 $4 $5
				;;
			"delete")
				kubectl delete pv $1-$2
				;;
		esac
		;;
	"app")
		shift
		APPNAME=$1
		case $2 in
			"init")
				admin/00-namespace.sh ${APPNAME} on
				;;
			"preflight")
				admin/11-secrets.sh ${APPNAME}
				admin/16-ing.sh ${APPNAME}
				admin/18-pvc.sh ${APPNAME}
				;;
			"clean")
				admin/00-namespace.sh ${APPNAME} off
				;;
			"on")
				app/${APPNAME}/10-configmap.sh on
				app/${APPNAME}/20-deploy.sh on
				app/${APPNAME}/40-svc.sh on
				;;
			"off")
				app/${APPNAME}/10-configmap.sh off
				app/${APPNAME}/20-deploy.sh off
				app/${APPNAME}/40-svc.sh off
				;;
			"print")
				kubectl get all -n app-${APPNAME}
				kubectl get pvc -n app-${APPNAME}
				echo ---------------------------------------------------------------------
				echo \#\# Persistent Volume Claim
				kubectl get pvc -n app-${APPNAME}
				echo ---------------------------------------------------------------------
				echo \#\# Persistent Volume
				kubectl get pv | grep "app-${APPNAME}"
				echo ---------------------------------------------------------------------
				echo \#\# Configure Map
				kubectl get configmap -n app-${APPNAME}
				echo ---------------------------------------------------------------------
				echo \#\# Secrets
				kubectl get secret -n app-${APPNAME}
				;;
		esac
		;;
	#------------------------------------------------------------------------------
	*)
		echo $(basename $0) version
		echo $(basename $0) env
		echo $(basename $0) config ...
		echo $(basename $0) secret-create
		echo $(basename $0) "state [list/save/load] [config/secret/data] [state_name, ex: date-stage-env]"
		# AppImplementing Section: usage
		#------------------------------------------------------------------------------
		echo $(basename $0) certs on/off
		echo $(basename $0) ing on/off
		echo $(basename $0) ssh ...
		echo $(basename $0) "store create <namespace> <volname> <capacity> <volpath>"
		echo $(basename $0) "store delete <namespace> <volname>"
		echo $(basename $0) app appname init/preflight/on/off/clean/print
		#------------------------------------------------------------------------------
		;;
esac

