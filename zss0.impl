#!/bin/bash

# zss interface

case $1 in
	"app")
		PROJECTNAME=zerus
		APPNAME=kube-apps-platform
		APPVERSION=0.1.3
		;;
	"config")
		CONFIGKEYS="domain subject hostctrl storagectrl"
		declare -A CONFIG_DESCRIPTIONS
		CONFIG_DESCRIPTIONS=( \
			["domain"]="the base domain name of the service." \
			["subject"]="the certificate subject string." \
			["hostctrl"]="the ctrl command to control host." \
			["storagectrl"]="the storagectrl command to create pv." \
			)

		DEFAULT_DOMAIN=minikube
		DEFAULT_SUBJECT=/C=CN/ST=State/L=Location/O=Org/OU=Unit/CN=minikube
		DEFAULT_HOSTCTRL='ssh -o "StrictHostKeyChecking no" -i `minikube ssh-key` docker@`minikube ip`'
		DEFAULT_STORAGECTRL=${PWD}/store/hostpath.sh
		;;
	"vars")
		EXTFILE=${SECRET}/v3.ext
		KEY=${SECRET}/cert.key
		CRT=${SECRET}/cert.crt
		REQ=${SECRET}/cert.req
		;;
	"requirement")
		echo - kubectl: $(which kubectl)
		echo - openssl: $(which openssl)
		;;
	"secret-create")
		rm -f ${KEY}.enc ${REQ}.enc ${CRT}.enc

		[ -f ${EXTFILE} ] || $(dirname $0)/templates/v3.ext.template "${DOMAIN}" > ${EXTFILE}
		openssl genrsa -out ${KEY}
		openssl req -sha512 -new -key ${KEY} -out ${REQ} -subj "${SUBJECT}"
		openssl x509 -sha512 -req -days 730 -in ${REQ} -signkey ${KEY} -out ${CRT} -extfile ${EXTFILE}
		gpg -ear ${GPGKEY} -o ${KEY}.enc ${KEY}
		gpg -ear ${GPGKEY} -o ${REQ}.enc ${REQ}
		gpg -ear ${GPGKEY} -o ${CRT}.enc ${CRT}

		rm ${KEY} ${REQ} ${CRT}
		;;
	"state-data-save")
		echo "DATA state not support."
		;;
	"state-secret-load-post")
		;;
	"state-data-load")
		echo "DATA state not support."
		;;
	# AppImplementing Section: commands
	#------------------------------------------------------------------------------
	"command")
		shift
		case $1 in
		"certs")
			shift
			case $1 in
				"on")
					gpg -d ${KEY}.enc | \
						kubectl create secret generic traefik-cert-key --from-file=cert.key=/dev/stdin -n kube-system
					gpg -d ${CRT}.enc | \
						kubectl create secret generic traefik-cert-crt --from-file=cert.crt=/dev/stdin -n kube-system
					;;
				"off")
					kubectl delete secret traefik-cert-key -n kube-system
					kubectl delete secret traefik-cert-crt -n kube-system
					;;
				"info")
					gpg -d ${REQ}.enc | openssl req -text -noout -verify -in -
					gpg -d ${CRT}.enc | openssl x509 -in - -text -noout
					;;
				"csr")
					gpg -d ${REQ}.enc
					;;
				"crt")
					gpg -d ${CRT}.enc
					;;
				"v3")
					cat ${EXTFILE}
					;;
			esac
			;;
		"ing")
			shift
			case $1 in
				"on")
					kubectl create configmap traefik-conf -n kube-system --from-file=traefik.toml=traefik/traefik.toml
					kubectl apply -f traefik/traefik-rbac.yaml
					kubectl apply -f traefik/traefik-ds.yaml
					;;
				"off")
					kubectl delete -f traefik/traefik-ds.yaml
					kubectl delete -f traefik/traefik-rbac.yaml
					kubectl delete configmap traefik-conf -n kube-system
					;;
			esac
			;;
		"ssh")
			shift
			eval ${HOSTCTRL} -- \"$*\"
			;;
		"store")
			shift
			ACTION=$1
			NAMESPACE=$2
			PVCNAME=$3
			CAPACITY=$4
			PATHNAME=$5
			TYPENAME=$6
			case ${ACTION} in
				"create")
					eval ${STORAGECTRL} create ${NAMESPACE} ${PVCNAME} ${CAPACITY} ${PATHNAME} ${TYPENAME}
					;;
				"delete")
					eval ${STORAGECTRL} delete ${NAMESPACE} ${PVCNAME}
					;;
				"secret")
					eval ${STORAGECTRL} secret ${NAMESPACE}
					;;
			esac
			;;
		"app")
			shift
			APPNAME=$1
			case $2 in
				"init")
					source admin/00-namespace.sh ${APPNAME} on
					;;
				"preflight")
					source admin/11-secrets.sh ${APPNAME}
					source admin/14-network-policy-deny-from-other-namespaces.sh ${APPNAME}
					source admin/16-ing.sh ${APPNAME}
					source admin/18-pvc.sh ${APPNAME}
					source admin/70-resource-quota.sh ${APPNAME}
					;;
				"clean")
					source admin/00-namespace.sh ${APPNAME} off
					;;
				"on")
					for script in app/${APPNAME}/*.sh
					do
						source ${script} on
					done
					;;
				"off")
					for script in app/${APPNAME}/*.sh
					do
						source ${script} off
					done
					;;
				"print")
					echo ---------------------------------------------------------------------
					echo \#\# Workloads
					kubectl get all -n app-${APPNAME} -o wide
					echo ---------------------------------------------------------------------
					echo \#\# Ingress
					kubectl get ing -n app-${APPNAME} -o wide
					echo
					echo ---------------------------------------------------------------------
					echo \#\# Persistent Volume Claim
					kubectl get pvc -n app-${APPNAME} -o wide
					echo
					echo ---------------------------------------------------------------------
					echo \#\# Persistent Volume
					kubectl get pv -o wide | grep "app-${APPNAME}"
					echo
					echo ---------------------------------------------------------------------
					echo \#\# Configure Map
					kubectl get configmap -n app-${APPNAME} -o wide
					echo
					echo ---------------------------------------------------------------------
					echo \#\# Secrets
					kubectl get secret -n app-${APPNAME} -o wide
					;;
			esac
			;;
		esac
		;;
	#------------------------------------------------------------------------------
	"usage")
		echo $(basename $0) certs on/off/info/csr/crt/v3
		echo $(basename $0) ing on/off
		echo $(basename $0) ssh ...
		echo $(basename $0) "store create <namespace> <volname> <capacity> <volpath>"
		echo $(basename $0) "store delete <namespace> <volname>"
		echo $(basename $0) "store secret <namespace>"
		echo $(basename $0) app appname init/preflight/on/off/clean/print
		;;
esac

